//file:noinspection GroovyAssignabilityCheck
plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.mod_id
version = "${project.mod_version}+${project.minecraft_version}"

repositories {
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
		content {
			includeGroup "com.github.LlamaLad7"
		}
	}
}

loom {
    splitEnvironmentSourceSets()

    mods {
        modid {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

	accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")
}

configurations {
	includeModImplementation

	include.extendsFrom includeModImplementation
	modImplementation.extendsFrom includeModImplementation


	includeImplementation

	include.extendsFrom includeImplementation
	implementation.extendsFrom includeImplementation
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric api in-case you need it.
	// Don't forget to uncomment 'fabricapi_version' in your 'gradle.properties'
	// Don't forget to add '"fabric-api": "*"' to your fabric.mod.json :D
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricapi_version}"

	// Include a module of fabric api. You always forget how to lol
	// Don't forget to uncomment 'fabricapi_version' in your 'gradle.properties'
	// includeModImplementation fabricApi.module("fabric-api-base", project.fabricapi_version)

	// Mixin extras in-case you need it.
	includeImplementation "com.github.LlamaLad7:MixinExtras:${project.mixinextras_version}"
	annotationProcessor   "com.github.LlamaLad7:MixinExtras:${project.mixinextras_version}"
}

processResources {
	inputs.properties(Map.of(
			"modId",          project.mod_id,
			"modVersion",     project.version,
			"modName",        project.mod_name,
			"modDescription", project.mod_description,
			"modLicense",     project.mod_license,
			"mavenGroup",     project.group,
			"modMainClass",   project.mod_main_class
	))


	filesMatching("fabric.mod.json") {
		expand(Map.of(
				"modId",          project.mod_id,
				"modVersion",     project.version,
				"modName",        project.mod_name,
				"modDescription", project.mod_description,
				"modLicense",     project.mod_license,
				"mavenGroup",     project.group,
				"modMainClass",   project.mod_main_class
		))
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}